# syntax=docker/dockerfile:1

# Use an customized image of Node.js
# https://hub.docker.com/_/node
FROM node:lts-alpine

# Set the working directory to the website files
WORKDIR /usr/src/app

# Copy only files required to install dependencies
COPY --chown=node:node package*.json .

# Install all dependencies
# Use cache mount to speed up installation of existing dependencies
RUN --mount=type=cache,target=.npm \
	npm set cache .npm && \
	npm install

# Copy the remaining files AFTER installing dependencies
COPY --chown=node:node . .

# Build all static assets
RUN npm run build

# Remove all development dependencies
RUN npm prune --production

# Use an customized image of PHP
# https://hub.docker.com/_/php
FROM php:fpm-alpine

# Install some PHP extensions
RUN curl -sSLf -o /usr/local/bin/install-php-extensions \
		https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions && \
	chmod +x /usr/local/bin/install-php-extensions && \
	install-php-extensions zip pdo_mysql pdo_pgsql redis opcache intl

# Set the working directory to the website files
WORKDIR /var/www/html

# Install Composer for dependency management
COPY --from=composer:latest /usr/bin/composer /usr/local/bin/composer

# Copy only files required to install dependencies
COPY --chown=www-data:www-data composer*.json ./

# Install all dependencies (with root privileges)
# Use cache mount to speed up installation of existing dependencies
# https://github.com/composer/composer/issues/11839#issuecomment-1934505185
ENV COMPOSER_ALLOW_SUPERUSER 1
RUN --mount=type=cache,target=.composer composer install --no-dev --optimize-autoloader

# Add some cronjobs for Symfony custom commands
# https://github.com/webdevops/Dockerfile/issues/280#issuecomment-1311681838
RUN echo "* * * * * /usr/local/bin/php /var/www/html/bin/console app:tasks-executor > /dev/null 2>&1" >> /var/spool/cron/crontabs/root
RUN echo "0 * * * * /usr/local/bin/php /var/www/html/bin/console app:statistics-collector > /dev/null 2>&1" >> /var/spool/cron/crontabs/root

# Copy files from the previous stage
COPY --from=0 --chown=www-data:www-data /usr/src/app ./

# Add wait script to wait for other services to be ready
ADD https://github.com/ufoscout/docker-compose-wait/releases/latest/download/wait /wait
RUN chmod +x /wait

# Use the default or custom PHP configuration (if exists)
RUN mv $PHP_INI_DIR/php.ini-production $PHP_INI_DIR/php.ini && \
    if [ -f "docker/php.ini" ]; then \
    	mv "docker/php.ini" "$PHP_INI_DIR/php.ini"; \
    fi

# Change current user to www-data
USER www-data

# Use the PHP custom entrypoint
# https://symfony.com/doc/current/deployment.html / https://symfony.com/doc/current/setup/file_permissions.html
RUN mkdir -p docker && echo '/wait && mkdir -p var/cache var/log && \
    /usr/local/bin/php bin/console cache:clear && composer dump-env prod && \
    /usr/local/bin/php bin/console doctrine:database:create --no-interaction --if-not-exists && \
    /usr/local/bin/php bin/console doctrine:schema:update --complete --force && \
    /usr/local/bin/php bin/console app:udp-server 127.0.0.1:8443 & \
    php-fpm' > docker/entrypoint.sh && chmod +x docker/entrypoint.sh

CMD ["docker/entrypoint.sh"]